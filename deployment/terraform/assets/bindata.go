// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (20.433kB)
// assets/dashboard.yaml (231B)
// assets/dashboard_data.json (40.142kB)
// assets/datasource.yaml (296B)
// assets/es_dashboard_data.json (8.51kB)
// assets/outputs.tf (566B)
// assets/variables.tf (1.243kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3c\xfd\x8f\xdb\xb8\x95\xbf\xfb\xaf\x78\xa7\x04\x4d\x52\x44\x92\x3d\x9e\x6c\x92\x69\x67\x17\xd3\x74\xb7\x28\xb0\x1f\xc1\x6d\xef\x8a\x43\x3a\x10\x28\xf1\xd9\x66\x46\x12\x19\x92\x1a\xc7\xc9\xcd\xfd\xed\x07\x52\xd4\x87\x65\xc9\xd6\x38\x93\x4d\xd2\x4d\x8a\x62\x3d\xe4\x7b\x8f\x8f\xef\xfb\x91\xb4\x27\x1a\xa5\x24\x0b\x2e\x33\x78\x3f\x01\x90\xf8\xa6\x60\x12\x69\x24\x24\xbf\x66\x14\xa5\xb2\xc3\x00\x64\xad\xe0\xdc\x7d\x06\x50\xbc\x90\x09\x02\x9c\x83\xb7\x22\x6a\xc5\x12\x2e\x45\x48\xd6\xca\x73\xf3\xd7\x28\x15\xe3\xb9\x99\xff\xbf\x6f\x61\x1e\x4c\xcb\x89\x9b\x89\xf9\xff\xcd\x64\x52\x51\x07\xcf\x20\xb9\x95\x97\x06\xc3\xa0\x14\xca\x47\xa2\xb4\x3f\x33\x58\x42\xf2\x05\x4b\xd1\x8c\x67\x99\x9f\x72\x42\x35\x2a\xed\x19\x2a\x94\x68\x62\x29\x44\x25\xb2\x07\x5e\x52\x48\x89\xb9\xf6\xe0\xfd\xd6\x7c\x42\xd2\x14\x65\xc4\x28\xe6\x9a\xe9\xcd\x30\xa0\x2a\xe2\x1c\x75\xc4\xa8\xf2\xc0\x53\x98\x62\xa2\x91\x96\x0c\x5e\x8b\x24\x62\x14\xce\xe1\x9a\xc8\x00\x55\x74\x2d\x12\xc3\x84\x44\x27\x0c\x8b\x7f\x85\x9b\x48\x10\x26\x3d\xf0\xae\x70\x53\x22\x9a\xb1\x9c\x64\x08\x76\x73\xf7\xdf\x1b\xfc\x24\x2d\x94\x46\x69\xc7\x6f\xfc\x2b\xdc\x58\x24\xb3\xdd\x22\x4e\x59\x62\xe8\xc0\x39\x98\x8d\x3f\x34\xe0\x4a\xad\xa2\x66\xe6\xd1\xee\xba\x2c\x57\x9a\xe4\x09\x7a\xe0\x11\x21\x22\x85\xf2\x1a\x65\xb9\xbc\x26\xcb\x46\x75\x3f\x1b\x3e\x06\xb8\x20\x42\xf8\xf7\xdf\x27\xbc\xc8\x75\xc0\x72\x8a\x6f\x6f\x3c\xab\xaf\x09\x40\xc2\xf3\x1c\x13\x6d\x14\x54\xd2\xb9\x07\xff\x58\x21\x50\x5c\x90\x22\xd5\x50\x28\x94\x76\x87\x0b\x2e\x81\x17\x12\x2e\x7e\xfa\xbb\x05\xd3\x1b\x61\x97\x53\x6a\x55\x5a\x80\x81\xb4\x2a\x8e\x8b\x5c\x17\xe5\xd8\x8a\x2b\x0d\xe7\xa0\x30\x5d\x04\x6e\x93\x4c\x54\x2b\x93\x8c\x41\xf3\xef\x1c\x3c\x92\x31\x7f\xba\x20\xf3\xa7\xcf\xbe\x99\x93\x45\x7c\xf2\x7c\xfa\xec\x74\xea\xc1\x3d\x38\x99\x06\xd3\x53\xf8\xf1\x1f\xbf\x4e\x00\x2a\x71\x44\x8e\x01\xb3\x59\x23\x97\xad\xf1\x6d\xd5\x58\xea\x6d\x15\x06\x57\xb8\x09\x18\xb5\xbb\x2f\x72\xdd\xe2\x61\x87\x9a\x05\x70\x26\xa2\x30\x29\x24\xd3\x9b\x68\x29\x79\x21\x8c\x25\xc1\x39\xbc\xaa\x7c\xa8\x33\x6d\xc8\xbc\x9a\x5e\x06\x8c\x3e\xde\x03\x11\x2d\xb9\x52\xcc\x01\x4e\x00\x2e\x8d\x60\xe8\x26\x27\x19\x4b\xc0\x93\x9c\xeb\x28\x4e\x79\x72\x15\x51\xbc\x66\xc6\x06\x4a\x1d\x2d\xb8\x8c\x90\x24\x2b\xc7\xf1\x0e\x9c\x05\x4a\x78\xae\x31\xd7\xb5\x67\x5f\xf3\xb4\xc8\x30\x52\xec\x9d\x91\x5b\xca\xf9\x55\x21\x1e\xee\xa0\x06\xd7\x24\x2d\xf0\x31\x78\x2d\x70\xef\x31\xe4\x45\x9a\x3e\xda\x26\xe4\x14\x30\x96\x90\x01\xdf\x22\x74\x53\x19\x82\x0d\x19\x26\xa8\x98\xa8\x61\x1c\xa3\xda\x66\x15\x8b\x1a\xdd\x64\x44\x6b\x94\x19\x57\x3a\x4a\x59\x82\xb9\xc2\xc8\x20\x58\x68\x8a\x4a\xb3\x9c\x68\x17\x9d\xc2\x15\xcf\x30\x2c\xad\x31\x6c\xf0\x5a\x24\x7c\x47\xc2\xeb\x65\x44\x62\xc6\x35\xfa\xf8\x16\x93\x8a\x1f\x96\xa7\x2c\xc7\x5a\xe9\x00\xde\x7a\x65\x02\xd8\x2b\xf8\x0f\xf0\x17\x10\x5e\x13\x19\xa6\x2c\x0e\x93\x94\x17\x34\xac\x6c\x28\x8c\x39\xd7\xfe\x82\xe5\x4c\xad\x90\xc2\xe5\x9f\x80\x72\xc0\x64\xc5\xe1\xc1\x3f\x09\xd3\x2c\x5f\x5a\xe7\xb2\x48\x3e\xcb\x99\x0e\x82\xe0\xc1\x9f\x40\xa5\x88\x02\x66\x06\x3a\x47\xef\x71\xb5\x62\x89\xa8\x13\x11\xc5\xb1\x7c\x00\xff\x0b\xaa\xa0\x1c\x34\x22\xf8\x04\x42\xd4\x49\x98\x71\x5a\xa4\xa8\x1a\x14\x0b\x91\x71\x2a\x24\x8f\x11\x1c\x6a\x33\xbd\x5e\xa2\x06\xdf\xcf\xb9\x9f\xac\x30\xb9\xf2\x13\x94\x9a\x2d\x58\x42\x34\x82\xff\xe6\x17\xf0\x61\xa5\xb5\x50\x67\x61\xa8\xe6\x3e\x16\xfe\x1a\x4d\x00\x0f\x48\x46\xde\xf1\x9c\xac\x55\x90\xf0\x2c\xa4\x18\x07\x92\xc7\x85\xd2\x02\x65\x82\xc2\x68\x21\x60\x3c\x3c\x9d\x7d\xff\xc3\x8b\xe7\xcf\xff\x1a\x2c\xc5\xb2\x62\x96\x08\x6d\xe2\x22\x10\x4a\xc1\x3f\x86\x8f\xf5\x7a\x1d\x08\xae\xf4\x52\xa2\x7a\x93\x06\x5c\x2e\xc3\x0c\x29\x23\xe1\x15\x6e\x54\x78\xf1\xe2\xc5\x8b\xd3\x17\x3f\x3c\x0b\x88\x4a\x0e\x2c\x69\xe7\xd4\x0a\xfc\x04\x1e\x58\xc1\xfe\xcb\xa3\x18\xdb\x75\xce\xc2\x90\x08\xdd\x5d\x46\x14\x71\x28\x51\x70\x65\x26\xe1\xfe\xc3\x54\xc5\x91\xc4\x14\x89\x42\xf0\x13\xf5\xc8\x17\x4b\xba\x84\x8c\xb0\xfc\x5f\x1e\x7c\x5b\xea\x83\x08\x1d\x96\x96\xac\x82\x94\x29\x1d\xd0\xd0\x40\xd9\xcf\x0f\x3a\xbc\x18\x3e\xad\x18\x36\x50\x08\x4a\x34\x0e\xcc\x5b\xdb\x4a\x53\x03\x97\x6d\xd4\x9b\xd4\x4f\x52\x86\xb9\xf6\x9f\x05\xd3\xc3\x18\xcd\x9e\x2a\xb4\xd9\x6c\x04\x96\xe4\x19\xea\x15\x16\xca\xcf\x39\x35\x8e\x21\xb8\xd4\x28\x0f\x63\xe6\x45\x46\x12\x9d\x42\xca\xf2\xe2\xad\xaf\x39\x4f\x95\x6f\x8a\x8e\xf6\xdf\x4f\x82\xd3\x60\xea\xcf\xa6\xf3\xe7\x7e\x5d\x6c\x5c\x56\x35\xc5\x60\x42\xcc\x50\x4b\x96\xa8\xe3\x92\xa2\x43\xfe\xb7\xc9\x84\x9e\x9e\x07\x6f\x53\x22\x97\x36\xa0\x8d\xcb\x6c\xf0\x2d\x4c\xe1\x3b\x98\xc1\x19\x4c\x47\x26\xcd\xa3\x92\xa1\x93\x75\x93\x10\xbf\x26\xba\xcf\x34\xbf\x7c\x2e\xd9\xe0\xd8\x70\xd8\x84\xa9\x6e\x98\xdf\x28\x8d\x99\x89\x43\x98\x93\x38\xc5\x61\xc8\x1e\xaa\x84\x52\xeb\xd5\x29\x8b\x17\x3c\xd7\x09\xcf\x17\x6c\x39\xeb\x48\xad\x12\x0c\x4d\x83\xa5\x24\x0b\x92\x13\x2b\x0c\xae\x54\xe8\x72\x44\xe8\xc6\xa3\xa7\xc1\x3c\x78\x1a\x91\x8c\x7e\x73\x1a\x50\x8c\x3b\x0c\x50\x71\xb5\x04\x9f\xc1\x41\xe8\xad\x65\x97\x4c\xaf\x8a\xd8\x2e\xc9\xf2\xb8\x48\xae\x50\x37\x1f\x1c\x03\x2a\xa4\x7c\x9d\x9b\x56\x2b\xbc\x3e\x09\x66\xc1\xb4\x86\x88\xec\x9f\x91\x8d\xc9\x07\x19\x1b\x8b\x34\xc4\xdf\xeb\x42\xe9\x35\xd1\xc9\xca\xfc\x81\x29\x51\x9a\x25\x0a\x89\x4c\x56\x51\x95\x56\xfa\x38\x9e\x59\x8e\xfb\xe1\x7d\x3b\x19\x94\x39\xa5\x64\x45\x13\x19\x2c\xdf\x75\xeb\xa0\x2b\xca\x24\x84\x5c\xe8\x01\x42\x1d\x78\x4d\x24\xf8\xef\xde\x5e\x2f\xe0\x96\xeb\x82\xff\x62\xdf\x32\xe0\xfb\x4a\x4b\x26\xfc\x84\x67\x82\xe7\x98\x6b\x75\xde\xcd\xc2\x8d\xc9\x52\x82\x19\xcf\x7d\x89\x46\x10\x87\x0c\xdb\x99\x8d\xef\xb2\x62\x07\x1a\xa5\x09\x5a\x1d\x20\x50\x9a\x48\x7d\x88\x70\xa5\xf6\x01\x92\xd5\xb4\x23\x36\x32\x87\x0b\xc9\xdf\x6e\x8e\xcb\xe0\x16\xb5\xcc\xdf\xdd\x24\xba\xfd\xef\xb8\x94\xda\xa5\x61\x18\x28\xb9\xed\x36\x9b\xdb\xc9\xb6\x0f\xaf\x37\xf5\xce\x5a\xa9\x97\x28\xc5\x13\x46\x34\x46\x75\x79\x10\x11\x4a\x25\x2a\x23\x0b\x2d\x0b\x3c\x2a\xf1\x5a\x7e\x5b\xed\x65\x2b\xc7\x0f\xa6\xf7\xdf\x5b\x5a\xfe\x74\x85\xdf\x97\x50\x10\xdc\x7d\xc3\xf9\xe1\xa9\xfd\xd6\x1d\xc8\x92\xe5\x6f\x3f\x4a\xa3\x72\x27\x01\xbb\x8f\x3d\x99\x59\x0d\x1b\xf9\xda\xe9\x50\x31\x8d\xca\x2f\x31\x68\xe8\x8c\xb3\x83\x94\xe6\xe0\x2f\xd4\x2e\x16\xb9\x26\x2c\x35\x88\xad\x83\x90\x61\xda\x0d\xcc\xfe\x18\x4e\xb2\xc8\x85\x7e\x53\x01\x5c\x21\x8d\x24\x4f\x4d\x48\x47\x77\xf0\xbb\x13\x16\xeb\x13\xd6\x4e\x28\xfc\xc3\x1f\xaa\x89\x44\xa2\x89\x81\x86\x50\x3b\x38\xae\x55\xbd\x94\x8b\x5d\x1e\xaa\xed\xa2\xd3\xdb\xe5\x70\x3b\xf3\x52\x6e\xfa\x72\xcb\xde\x71\xe9\xa6\xc1\xab\xfc\xb7\x24\xd9\x6a\x99\xaa\x6c\xd3\x8f\x6e\xf0\xb6\x79\x6a\x4e\xd3\xab\xa3\xe7\x72\xa0\xea\xb2\xb8\x2d\x9d\xab\x93\xfa\xe6\x08\xbb\x15\x12\x30\xc5\x0c\x73\xfd\x50\xf3\x94\x29\xfd\x90\x12\x4d\x82\xed\xf3\xee\xa0\x3a\xed\x0e\x18\x55\x8f\x1e\xc3\xf4\x51\xad\x56\x80\xfe\x74\xd2\x93\x49\x1c\xe3\x65\x2e\xb9\xac\x25\x50\xe5\x0a\x8c\x55\xc5\xed\x40\x96\x40\x15\xb5\x80\x7a\x53\x84\x99\x77\x56\xd8\x24\xbd\xc1\x90\xdf\xa2\x36\x10\xec\xbd\xa5\x38\xf1\x1e\xed\xcb\x3f\x7b\x68\xb8\xcc\x73\x32\xed\xa6\x0b\xa7\xd5\xb2\x09\xa8\x23\xf5\xee\xb1\x74\xdb\xce\x5d\xa1\x50\xb6\xfb\x49\x82\x4a\x45\x82\xa7\x2c\x61\x68\xe4\xfd\xe7\x3f\xbf\xf8\xe5\xe7\x1f\xfe\xfe\xb7\x09\xd4\xa2\xf0\xfe\xbb\xb4\x04\xef\x0c\xbc\x93\xe9\xec\xc4\x9f\x4d\xfd\xd9\xd3\xc6\xdf\x7f\xd5\x44\x5b\xc5\x7b\x67\xb5\x29\x98\x7f\xef\x27\xdb\xe5\x87\x77\x61\x33\x9b\x21\x83\xea\xec\x8f\x35\x81\x7a\xfe\xa5\x64\x79\xc2\x04\x49\x0d\x48\xcf\xfc\xf7\x8b\x05\x26\x66\x15\xef\x22\x4d\xf9\x7a\x17\xe0\x3f\x9d\xcf\x19\x10\x22\xf3\x33\xb2\x56\x67\xa8\xce\xee\xbf\xaf\x4d\xb1\xbc\xc3\x09\xdc\xc5\x4c\x60\xdd\xa1\x3d\xdf\xb9\xc3\xa9\x01\x49\x62\xc3\x43\xc4\xe8\xcd\x59\xe9\x6a\x61\xbf\x63\x85\x7f\xf4\x5a\x5c\xdd\xb8\xcf\x97\xae\x32\x74\xb2\x35\xd6\x8a\x02\x73\xaa\x22\xeb\x71\x4d\xcd\x34\x10\xc9\x02\x54\xf5\x51\x45\x19\xa7\x06\xe2\x97\x89\x3c\x3d\xc1\xd1\x94\x03\x1e\x78\x6a\x5e\x7e\x30\x9a\x29\x23\xc5\x40\x80\x70\x80\x9d\xd5\x0e\x54\x8e\xbd\x61\xd9\x59\x98\xbd\xa7\xf2\xd4\xbc\xbe\xaf\xb2\x05\x8a\x2b\xfc\x2a\x0e\x83\x72\x59\xe3\xd7\x86\x8d\x0f\x5c\x5d\xcd\x23\xd7\x23\x98\x85\xab\x8f\x66\x6d\xd7\x1b\xf4\xef\x3d\xa8\x61\xad\x7f\xa4\x2e\x8c\x0a\xc9\xae\x4d\x69\xd0\xe4\x92\x91\xd5\xf4\xe8\x98\xde\x5e\xd7\x3a\xe7\x82\xcb\x04\x23\x8a\x4a\x4b\xbe\xa9\x82\x50\xaf\x90\x8d\xd4\x4a\x27\xde\xd4\x5a\xae\xfe\x1c\xa9\x6b\x07\xfe\x31\x34\x63\xaa\x4b\x4b\xdd\x86\x97\xef\x7f\xf9\x61\x62\x78\xda\x13\x55\x7a\x23\x4a\x3b\x9a\xec\x8d\x04\x4d\x98\x79\xd5\x8d\x0f\x6a\x7e\xf6\x23\x53\xfa\x2f\xdb\xad\x63\xff\xf4\x4f\x45\xaa\xd9\x4b\x22\xf5\x7f\x09\x53\x38\xa9\x5e\xf0\xbf\x62\x8a\x1a\xf7\xd0\xfb\x1b\x3a\x72\x3f\xf2\xc4\xde\x07\xb5\xa3\xc3\xe5\x16\xdb\x7d\xc1\x4b\xcd\xcf\xce\xce\xee\xbf\xdf\x32\xe7\xda\x40\xcb\xfc\x77\x53\x51\xbc\x79\xdc\x27\xa9\xbd\xc2\xb8\x88\xb9\x2c\x37\x2a\xea\x8d\x0e\x8a\xa5\x03\x67\x44\xb3\x4f\x28\xbf\xc4\xaf\x8d\x8a\x06\x84\x32\x66\xf6\x22\x49\x7b\x01\x5e\x16\xfb\xd0\xeb\x59\x83\x3e\x28\xec\xbd\x06\x74\xac\x26\x9a\xd8\x7f\x63\x83\xf5\xcd\xc4\x18\xfb\x8e\xc7\x4a\xaa\x22\xe7\x82\x1e\x78\x34\x6e\xfe\xe8\xad\x54\x0f\x9d\x99\xbb\x8a\x95\xc6\xfb\x0f\xd4\x2b\xa7\x2f\x53\xdb\x82\x95\x4e\xde\x1b\x11\x68\x6c\xf6\x61\x72\x62\x4c\x14\xb6\x6b\xca\x7e\x84\x12\x3e\x23\x76\xa4\xee\x51\x1b\xc6\x69\x5c\x8f\x36\x70\x82\x28\xb5\xe6\x92\x6e\xc3\x55\xa3\x13\x00\x75\xc5\x44\xb4\x60\x39\x49\x23\x95\x13\xa1\x56\x5c\x37\x95\x18\x11\x22\xdd\x44\x2c\xb3\x97\x6d\x1a\xd3\x8d\x25\xe2\x26\xd1\xb4\x12\xd8\x27\xc2\xb6\x90\x4a\xa8\x1a\xbc\x2e\x80\xb7\xc1\xb7\x27\x5f\xf5\x13\xb9\xdc\x7f\x15\xd1\x53\xc2\xd2\xb8\xaa\x5e\xf7\x99\x47\xfb\x70\xaa\x3b\x34\xd4\xd8\x8c\xb6\x9b\xef\x06\xcc\xa6\x34\x97\xb6\x99\xf4\xd0\x1d\xb0\x9b\x9e\xa7\x1d\x7d\x76\xd7\x22\xd4\xd9\x71\xd0\xb8\x43\x7d\x54\xd4\xf0\x97\x12\xa5\x7a\xb7\xb8\xb5\x0b\x03\x35\x60\x05\x63\xcc\xa1\xcf\xb4\x5a\x78\x95\x01\x16\x9a\x47\x19\xcb\xb9\xac\x6c\x23\x2a\xc4\x52\x12\x5a\xbe\xc0\x59\x90\x54\x19\x30\x81\x72\xc1\x65\x66\x57\x60\xb9\x62\xcb\x95\x6e\xf7\x15\xb5\x91\x99\x81\xa8\x0f\xd8\x38\xa2\x71\x0b\x49\x32\x34\x62\x2c\x0d\xab\x7d\x33\x36\xa4\x0a\xb1\xec\xe9\x43\x77\x69\x95\x21\xc8\x0e\xaa\x6a\xa4\xa9\x19\x0e\xd0\x07\x58\x90\x8c\xa5\x9b\x41\x79\xc2\xf9\x39\x78\xa4\x90\x5c\x12\xdf\x5e\x0f\x7b\xf0\xdd\xf6\xc0\x93\xe0\xa9\x07\x67\xf5\x58\x73\x23\x3c\xb3\x2f\xb3\xea\xae\xae\x66\x7b\xa0\xa7\x6b\xef\xac\xbf\xa5\xab\xaa\xa0\x1a\xac\x6c\xb3\x5e\x79\x66\xc2\xbb\xac\x7a\x33\x33\xd6\x07\x65\xff\x53\x83\x95\x56\x92\xa1\x5e\x71\xda\x07\xdd\x9e\x77\x48\x37\xfd\x87\x17\x6d\x7f\xc7\x9c\x0a\xce\x72\xdd\xf2\xf7\x6a\x68\x84\xbf\xf7\xf8\xc2\x48\x6f\xdf\xe7\xa4\xa3\x7c\xb4\xcb\x6d\x9b\xd2\x0e\x81\x9a\x87\x60\x27\xa8\xbd\x6a\x85\x8f\xcb\x60\x2d\x99\x46\x69\x2c\xa6\xcf\x06\xd7\xd2\x1a\x4e\xdf\x94\xa4\x3d\x81\xa8\x50\x9a\x67\x0d\x87\xed\x83\xf5\x73\xf0\x2e\x7e\xfe\x1f\xcf\x84\x71\xa5\x89\x66\x49\x94\x61\x16\xa3\xac\xc3\xf7\x31\xdc\xf7\x46\xf7\x56\x44\xaf\x9e\x19\x46\x64\x59\x3e\x12\xbc\xd5\x3b\x3a\x83\x33\xfa\x25\xdd\x5d\x3f\x0c\xd8\x49\x07\x77\x74\xa7\x61\x77\x75\xe0\x01\x5d\x17\x6f\xcc\x73\xba\x11\x6b\x55\xcf\xeb\xea\xc3\xaa\x41\xc4\x4a\x11\x35\xe4\xb8\x3b\x93\xdb\x96\x08\x96\x3f\x6b\x44\xbf\xc3\x8b\x90\x2f\xe1\x3a\xe2\x13\x5c\x1e\xdc\xed\xf3\xa5\x6d\x83\x2b\x5f\xf5\xee\x66\x99\x91\x0f\x76\xda\x0e\xba\xe7\xed\x6f\xb5\xa6\x5f\xae\x69\x4f\xc2\x54\x22\x99\xa8\x1e\x4b\x5e\x08\x51\x9f\x04\x83\x05\xb2\x3a\xa9\x82\x65\x95\x69\xa0\x67\x01\x1b\xbf\x59\xbe\xb4\x5e\xe7\xbc\x42\xf2\x2c\x32\xe2\xb5\x5c\x9d\x9c\x94\xd1\x90\x57\x43\xad\x41\x21\xb9\xe6\x09\xaf\xce\x7b\x74\x22\x4a\xd9\x25\x8c\xca\xd2\x88\xad\xa3\x7a\xd3\xc0\xfe\x2f\x9c\x7a\xd5\xa1\xde\xbe\x15\x9f\x4d\xbf\x79\xd2\xb3\x66\x3d\x7c\xf7\xab\x5a\xe2\x4f\x3b\x6b\xb6\x06\x9b\x15\xdb\xeb\xdd\x83\x9f\xc8\x26\x46\x90\xa8\xb4\x64\x89\x06\x9e\xa7\x1b\x4b\x15\x5e\xd6\xe6\x0a\xee\x86\xfe\x3b\x87\xf2\x97\x42\xc3\x8a\xe4\x74\x03\xa5\xf3\x69\x72\x65\x5c\xc8\x3d\xa6\x57\xb0\x66\x7a\xc5\x0b\x0d\x19\xc9\x0b\x92\xa6\x1b\x50\x6a\xe5\x1b\x08\x96\x6b\x0e\x7a\x85\x8e\x60\xf0\xc1\x82\x2e\xc5\xf7\x7c\x36\x9d\xee\x08\xbb\x33\xd5\x16\x78\x57\xe8\xdb\xfe\x30\x14\x97\xb7\x1e\x90\x55\xac\xe1\xb0\x09\xec\xb2\x54\x8d\x75\x94\x5f\x7e\x15\xe1\xb0\x20\x46\xf9\xb1\x7b\xce\xfd\xdb\xba\xb3\xef\x16\x1d\xed\xd5\x25\xfc\x5d\x38\x77\xe5\x57\x4f\x4f\x07\x2c\xa0\x9e\xea\xb1\x80\x82\xde\xca\x02\xea\xf7\xf4\x63\x0d\xf3\x48\xb6\x6e\x69\x98\xc7\xb0\xb5\x1b\x9c\x3a\x53\x9f\x46\x5a\xc7\xb0\xf5\xa1\xd2\xfa\x8d\x5d\xf8\x90\x0f\xd3\xb8\xed\xbb\xb7\xf2\xda\xe1\x9e\xbd\x9b\x7d\x47\x68\x63\x3e\x9f\x7e\x33\xa0\x8d\x7a\xea\xce\xb5\x31\x82\xaf\x27\xa7\xf3\xdd\x6c\xde\x99\xba\x73\xbe\x46\x84\xde\xa6\x97\x1b\x13\x42\x6d\x17\x77\xb0\x26\xfa\xb1\x8a\x8f\x16\xfe\xf8\xf2\xa8\xfe\x7e\x99\xe3\xa9\x0d\x52\xce\x1c\xda\x61\x24\x0b\xfb\xae\xc2\x31\xae\x56\xae\x6d\xdd\x69\xe8\xce\xc1\x73\x1a\xb4\xa7\x44\x1d\xf5\xd5\x75\x57\x57\x79\xf5\x44\x57\x75\x6d\xe5\xb5\xbd\xab\x9a\xeb\xfa\xd8\x4e\x9b\xe5\x3a\xc5\x81\x26\xeb\x76\xfb\x26\x82\x1d\xbf\xef\xd3\xa9\x2d\x45\xfa\x76\xee\xa6\x3e\xeb\xbd\x97\x61\x72\xcf\xf6\x71\xef\xee\x87\xb6\x3e\xb8\xef\x32\xa4\x7e\xf2\x6d\xbb\xaa\xcf\xd7\xdc\x6f\xbd\xd6\xde\x7f\x24\x37\x32\x68\xf7\x9c\x86\x8c\xb3\xa5\xc3\x26\x75\xd8\xb2\x76\x0c\x6c\x57\x8a\x35\xc8\x3e\x61\x56\x5f\x91\xdb\x3d\xdf\xe8\x47\xdc\xaa\xa2\x6f\xa7\x8a\xed\xa6\xf9\x33\x51\x81\x6b\x30\xf6\xa8\xc0\x41\x7c\xa1\x2a\x68\xbe\xe2\x74\xd7\x65\x49\xe5\x59\xdd\x2c\x38\xd2\x26\x6a\xf4\x2a\x17\xed\xda\xc2\xd1\x46\xf0\x85\x24\xb1\xa3\x7c\xa9\x92\xdb\xe1\x68\xf6\x11\xc5\xf7\x7c\xfa\x7c\x28\x21\xb8\xa9\x2f\x41\x84\xee\x0b\x0c\x9f\x40\x7e\xf3\xe1\x5a\x62\xfe\x9b\xd6\x12\x1f\x24\xbf\x76\x49\x71\xb7\xe2\xfb\xdc\x6b\x91\xdb\x86\x60\xf7\xf2\x75\x74\x7f\xe1\xe0\x0f\x77\x18\xbf\xee\xb6\x14\x0e\xb7\xbe\xb5\x19\xd5\x2d\x9e\x9e\xce\x07\x9a\xb2\x6a\xe6\x0e\x7b\xb2\xc7\x07\x45\x7a\xd9\xdc\x88\xed\x79\x34\xb9\x65\x49\x37\x93\xc9\x3d\xf8\x27\x42\x8e\x48\x81\x80\x42\x41\x24\xd1\xd8\x6d\xba\x8c\x09\x83\xe6\x20\x24\x5e\x9b\x9e\x2c\xd9\x24\x29\x4b\xdc\xb3\x4e\xcc\x93\x0d\xc4\xa8\xd7\x88\xf9\xe4\x9e\x3d\xe9\x24\x42\x38\x4c\x92\x53\x70\x4c\x96\x23\xc1\xb8\xda\x47\x08\x53\x7c\xd6\x5f\x7c\xfa\x4c\xea\x9e\x93\x27\x87\xea\x1e\x07\x71\xe7\x75\xcf\xb6\xef\xdc\xb6\xf8\xa9\x8d\x68\x84\xd7\x95\x5f\xee\xba\xcd\x49\xea\xec\x76\x27\xa9\x76\x81\xc3\x4e\xfa\xd2\x80\x7d\xb4\xcb\x91\x67\x7d\xa7\x5c\xcf\x7a\x8f\xb9\x46\x5f\x53\x7c\x82\xfb\x98\xcf\xf9\x9e\xe0\x53\x5f\x14\xb4\x1e\x1f\xbc\xe6\xf1\x71\x5f\x3d\x79\xcd\x63\xf7\x4d\xcd\x7f\xe7\xdf\xf1\x69\xc4\x73\x87\x3f\xe7\xd3\x47\xf4\x8e\x7e\xd5\xe7\xeb\x23\x81\xaf\xbf\xd6\xf3\x65\xfc\x9a\xc2\xd7\xdf\xd6\xf9\x32\x7f\x5b\x67\xeb\x21\xc9\xff\x07\x00\x00\xff\xff\x0b\x96\xe5\xd2\xd1\x4f\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3b, 0x56, 0x15, 0xaa, 0xbf, 0xa, 0xbf, 0x7c, 0x12, 0xf6, 0xb2, 0x62, 0x61, 0x6a, 0xd9, 0xf7, 0x8f, 0xdb, 0xda, 0xb8, 0x13, 0xbe, 0x99, 0x5b, 0x85, 0x22, 0xa1, 0x2d, 0xeb, 0x70, 0x3, 0xe8}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x6e\x02\x41\x0c\x44\xfb\xfd\x8a\xe9\xa8\xa2\x23\x4a\xb7\x75\x1a\xea\x88\xf4\x3e\xec\x03\x4b\x66\x77\x65\x9b\x8b\xf2\xf7\xd1\x52\x44\xa2\x9d\xf7\xe6\xd1\xd0\x6f\xf1\xd0\xde\x2a\xde\x4b\x19\xde\x77\x65\xf1\xa8\xe5\x0d\x8d\xee\x52\x71\xb8\x4b\xba\x5e\xe2\x50\x80\xee\xd7\x13\x4f\x11\xd8\xba\xb1\xf8\x2b\xce\xdf\x21\x15\x9b\x9a\x14\x80\x35\x68\x35\xf9\x14\x93\x7c\xe6\x37\xb2\x98\x40\x58\x73\x92\x8a\xf4\xc7\x1c\x1e\x83\x29\xe5\xd4\x52\x7c\x27\xfb\x92\x4b\x6f\x1c\x15\x1f\xc7\x63\x01\xc8\xac\xff\x9c\xf5\xfc\x74\xe2\xff\xd3\xc7\x8c\x46\x2d\x00\x30\x28\x6f\x15\xcb\x4e\xbe\x98\xae\xcb\xd5\x69\xa3\x46\x0b\x53\xdc\xd6\x4e\xce\x51\xfe\x02\x00\x00\xff\xff\x4e\xda\x5e\xba\xe7\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0xd3, 0xf5, 0x60, 0x9d, 0xb1, 0xc3, 0x4f, 0x3f, 0x8, 0x37, 0x26, 0x8f, 0xe5, 0x97, 0x54, 0xbb, 0xa4, 0x6b, 0x3d, 0xee, 0xdf, 0x22, 0x37, 0xc, 0xdd, 0xb7, 0x38, 0xb7, 0xdb, 0x2a, 0x9f}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x6d\x6f\xdb\xb6\xf6\xc0\xdf\xe7\x53\x10\xc2\xff\x7f\x91\x0e\x71\x16\x3b\x71\xb2\x04\xd8\x8b\xd4\x6b\xbb\x02\xcd\x96\x9b\x87\xdd\xe1\xb6\x85\x40\x4b\xc7\x32\x11\x49\x54\x49\xca\x89\xd7\x65\x9f\xfd\x82\x94\x64\x53\x0f\xb6\x65\xc5\xae\x9d\x86\x7b\xb1\x46\x47\xa4\xc4\x73\x78\x78\xf8\xcb\x21\xc5\x7c\xdd\x41\xc8\xc2\x61\x48\x05\x16\x84\x86\xdc\x3a\x43\x52\x84\x90\xe5\x13\x2e\xac\x33\xf4\x51\x5d\xa1\x54\xaa\xee\xf4\x63\xe2\x8b\xf7\xa1\x75\x86\xda\x7b\x53\xa9\x8b\x05\xe6\x34\x66\x0e\x58\x67\xc8\x6a\xb5\xd0\x3b\x86\x07\x38\xc4\xa8\xd5\xb2\xb4\x62\x10\xe2\xbe\x2f\x8b\x08\x16\x83\x26\x1f\x12\xb7\x42\x4a\x1c\x1a\xf6\xa8\x4f\x99\x7c\x26\xf3\xfa\x78\xf7\x60\x0f\x75\xda\xed\x3d\xd4\xe9\x76\xf7\x50\xfb\x95\xfe\xe8\x10\x07\xea\xdd\xe7\x53\x75\xd0\xbf\xd0\xb9\x0f\x4c\x70\xbd\x9c\x18\x47\xaa\x9c\x8b\xf9\xb0\x4f\x31\x73\xad\xf4\xde\xa3\xfa\xf7\xf3\x0e\x42\x8f\xb2\xb8\x05\x2e\x11\x85\xd6\x5a\x5e\x08\xe2\xbd\x6b\x9d\xa1\x4e\xf7\xa8\x93\x48\x18\x8e\x86\x37\x94\xfa\x82\x44\x99\x4d\x2c\xa2\x8a\x24\x3f\x0a\x60\xaa\x35\xf2\x66\xf7\xf4\xf0\xe4\xa7\xd3\x93\xee\xc9\x61\xf7\x50\xdd\xf5\x49\x78\x27\xad\xfe\xf1\xb3\xba\x8c\x70\x08\x3e\x9f\xd8\x3d\xb3\xba\x85\x7d\x82\xb9\xb2\x84\xea\xa2\xc7\x4c\x1d\xab\x8f\x95\x64\x80\x7d\x3e\x31\x9c\xd2\xec\x03\x84\x9e\x18\xca\x77\x1e\xe4\xe4\x50\x55\x5c\xef\x3a\x9f\x62\x57\x00\x17\xad\x54\x34\x29\x56\x61\x8e\x44\xce\x98\xea\xa0\xfc\x43\x07\xc4\xf7\x75\x17\x51\x82\x77\x0c\xbb\x04\x42\xe9\x58\xd3\x56\x79\x8c\xb8\x97\x74\xea\x7a\x89\x3f\x58\x67\xe8\x54\xeb\xb4\x7b\xf9\xac\x8e\x26\x78\xd0\x9f\x81\x90\x35\x96\xd7\x59\x47\x4e\x9e\x3d\x24\xae\x0b\xe1\x35\x30\x52\xa1\xb7\xea\xa4\x93\xc9\xa5\x0f\x1e\x84\x6e\xbe\x19\x78\xe4\x15\xab\x21\x64\x39\x31\x63\x89\x16\xc5\x3b\x01\x7e\xa8\x92\x92\xb0\x42\xca\x87\xf4\xbe\xec\xf2\x82\x0a\xec\x57\x94\x1e\x61\x3f\x9e\xea\x50\x52\xd4\x27\xa1\xba\x9b\xeb\x19\x29\xbc\x27\x6e\xe2\x06\xba\x54\x73\xb9\x64\xe8\xc4\xbe\x7f\x49\x49\x28\x2e\xa8\x1a\x86\x96\x43\xc3\x10\x1c\x01\xee\xb4\xfb\x69\x94\x8f\x10\x13\xd7\xf9\x30\x79\x5e\xa9\x55\x11\x30\x07\x42\x81\x3d\x28\x19\x3f\x92\xaf\x93\xee\x10\xcb\xba\xdd\xbc\xbc\xdc\x57\x0c\x42\x17\x18\xa8\x40\x30\xf0\xa9\x98\xb6\x8b\xab\xce\xfd\x7d\x04\x8c\x11\x17\x0a\x8a\xf1\x08\x3b\x50\x35\x14\xb8\xc0\xce\x5d\xe9\x2d\x5c\x40\x14\x81\xfb\x81\x84\xe5\x06\x0b\xcc\x3c\x10\x5c\x8b\x89\x7a\x54\x94\xe3\xe0\x21\x4a\xe2\x14\x16\xb0\x1b\x60\x21\x80\x05\x94\x0b\x3b\x92\xff\x53\xdd\xfa\x95\x84\x5c\xe0\xd0\x81\x9f\xff\xf9\x64\xfd\x1f\x07\x36\x02\xf6\xc9\x7a\xfc\xd8\x0e\x3e\xeb\x91\x4c\x0e\x16\xca\x02\x2c\x1d\xcc\x12\x24\x00\x3b\xd1\x31\x5f\x84\x84\x02\xd8\x08\xfb\x6f\xb1\x23\xd4\xf8\x6b\xe7\x6e\x27\xde\xfc\x76\xf2\x9c\xaf\x93\x97\x3f\x3e\xe6\x1f\x14\x80\x60\xc4\x91\x65\x2a\x1b\x9d\x2f\xcc\x60\xa0\xc2\x9f\x75\x9e\x97\x4b\xcb\xc9\x7e\x9c\xc8\x1e\xf7\xe6\x5b\x89\xc7\xc1\x6e\x33\x4b\xad\xdd\x54\x37\x65\xb5\x9b\xd9\xe8\xf5\x22\x1b\xa5\x3f\x4d\xfd\x55\x0c\x19\xf0\x21\xf5\xdd\x82\x1f\x4b\xd5\xde\x32\x1a\x58\x67\x48\x8e\xd5\x9c\xfc\x0a\xbc\x74\x60\x16\x2a\x5c\x0f\xc9\x40\x94\x6b\x08\x15\xc2\xad\x4b\xca\x05\x47\x11\x30\x74\x0d\x0e\x0d\xb5\x91\x2e\x26\x93\x99\x36\xd2\x03\x7e\x05\x9c\xfa\x71\x3a\x93\x95\x83\x19\x66\xe0\x96\xc3\x19\xa7\x4c\x14\x22\xb5\x8a\x64\x76\x36\x0b\x93\xd0\x25\x23\xe2\xc6\xd8\xb7\x4a\xe1\x23\x2b\xa3\xa6\xd8\x69\xfb\x1e\xf0\x03\x29\xc4\xa1\x7e\xec\xdc\x25\x83\x53\x57\x56\x36\x3b\x0d\x68\xd2\x1e\x15\xb0\x50\x28\x5d\x1d\x92\x27\xa1\xb7\x22\xc2\x8d\xf1\x03\xcc\x89\x09\x53\xe7\xe4\x43\x69\x89\xbc\xdf\xe1\x3e\xc8\x50\x6f\xf5\x68\x1c\x16\xef\x51\xef\x35\xe6\x50\xf2\xd5\x64\x82\xc9\x37\x7b\x32\xc3\x94\xc4\x9a\x3e\x0b\x07\x66\xad\xa6\x96\xde\xb0\xc6\x76\x96\x06\xc7\xb8\xdc\xef\xd8\x27\x5e\x95\x3b\x2a\xf9\x07\x18\x4d\x1a\x9d\x43\xbc\xd4\x04\x86\xae\xb2\xeb\x4a\xba\xca\x09\x9a\xe2\x95\x66\x9f\xd9\x7c\x55\x18\x6f\x8b\xf0\xaa\x50\x3c\xf1\xa9\x62\xdc\x69\x06\x57\x9a\x07\x1a\xb6\x7a\x06\x6c\x35\x14\x22\xb2\x19\x7c\x89\x81\x0b\xbe\x0d\x90\x85\xb2\xb7\xa3\x5a\x98\xa5\xda\xaf\x86\x38\xff\xe6\xb4\xb5\xa4\xed\xb6\x06\xbb\xea\xda\x6c\xab\xe9\xeb\x2a\xb5\xbb\x01\x30\x03\x60\xcb\x34\xd5\x00\xd8\xcb\x01\xb0\x62\x7a\xeb\xb4\x01\x7f\x1d\xd7\xc0\x2f\x93\xde\x32\x08\x56\x1f\xc1\x8a\x33\xf1\x3d\xf4\x39\x55\xc1\x7f\x2e\x43\x6c\x59\x7e\xab\xb2\xe9\x6b\x84\xaf\x86\x56\xdb\x04\x74\x3d\x0f\x80\xfa\x2d\x0e\xfa\xc0\x10\x1d\xa0\x5e\x36\x98\xd1\x2f\x30\x22\x0e\x70\xb4\xfb\x1f\xe8\x5f\x2b\xeb\x66\x37\xe5\x1b\x5e\x19\xc0\x32\x80\x65\x00\xcb\x00\x16\x42\xb3\x32\x5c\x4d\x08\xab\x6d\x08\xcb\x10\xd6\xba\x08\xcb\xed\xdb\x01\xe6\x02\x98\xed\x4c\x27\xb2\xe7\xc4\x59\x73\x14\xf8\x36\xb4\xb5\xbc\x05\xb7\x26\xd1\xb5\xbc\xed\x9e\x17\xb1\xa9\x1d\x3a\x82\xa2\x0b\xa5\x24\xfa\x05\x0b\xdc\x97\x33\xad\xc1\x34\x83\x69\x06\xd3\x0c\xa6\xa1\x19\x79\xb0\xf6\x4f\x4d\x30\xcd\x70\x9a\xe1\xb4\xd5\x72\x5a\xd5\xa2\x1a\x8e\x88\x9d\x70\x42\x1c\x24\xcb\x66\xa8\x3f\x46\xbb\x19\x69\xbc\x42\x3f\xa2\xb9\xd5\x1c\x19\x81\xab\x2a\x2e\x0d\x25\xe9\x8e\xda\x82\x7b\x2d\x4f\x2b\x78\xe4\xb5\x96\x5e\xd7\xd4\xcd\xb0\x26\xce\x1b\x12\x2e\xa8\xc7\x70\x60\x7f\x89\x71\x28\x88\x0f\xbb\x07\xfb\xa7\xa7\x7b\xf3\xed\x9b\xcc\xcf\x15\x06\xde\xf3\xa1\xc1\x12\xe7\x4c\x23\x17\xad\x18\x9d\x9e\xb6\x66\xa3\xb3\x06\x70\xdb\xc1\x6a\xe7\x97\xef\x51\xba\x44\x89\x6e\x48\x00\x68\xf7\x5a\xe1\xb1\xc9\xa1\xad\x19\xce\x66\x80\x99\x61\x32\xc3\x64\x5b\xcd\x64\x9d\x93\x06\x4c\x76\x78\x64\x98\xcc\x30\xd9\xda\x99\xcc\xed\xdb\x5c\x50\x06\x4d\xc0\x2c\x5f\xd7\xd0\x59\x26\x59\x29\x9d\xe5\x8d\x6c\x10\xad\x16\xa2\x5d\x4b\x8b\xa1\x1e\xf6\x7d\x43\x68\x86\xd0\x0c\xa1\x19\x42\xcb\x13\x5a\x69\x71\xb3\x51\xda\xec\xb0\x63\x10\xcd\x20\xda\x7a\x10\x2d\x1b\x4c\xb9\x9d\xe8\xb5\x21\x6d\x4e\x6d\x83\x69\x99\xe4\xe9\x98\x36\xc7\xcc\x06\xd4\x1a\xe6\xd2\x7a\xbe\x8c\xf3\x86\xd4\x0c\xa9\x19\x52\x4b\x6e\xbc\x68\x52\x5b\x49\x2e\xad\x7d\x68\x40\xcd\x80\xda\x4a\x41\x8d\x94\xce\x67\x60\xd4\x01\xce\x6d\x27\x8a\x6d\xae\xbe\x59\xab\xf1\xdd\xe0\x0f\xa8\x7d\x70\xb0\xb9\x5d\x69\xf5\x51\x69\x93\x8c\xd0\xbb\xbc\x45\xb7\x82\xf8\xe4\x2f\x75\x54\x10\xba\xc2\x02\xd0\xee\xff\x1b\x44\xd8\xdc\x5e\xa8\xb9\xdd\x81\x0c\x3a\x20\x83\x0e\x9b\x47\x87\x52\x92\xa7\x11\x3b\x74\x0d\x3a\x18\x74\x58\x29\x3a\x78\xd4\x0e\x20\xe0\x02\x0b\x6e\x63\xdf\xa7\x8e\xdd\x1f\x0b\xe0\x1b\xda\xb3\x7e\x2e\x5b\x30\x27\x65\x30\xcd\xbe\xcc\x68\xf7\x5a\x37\xac\xeb\xef\x54\x5d\x62\x93\x30\xe6\xb0\x5a\x8b\xad\x2a\x91\x75\x2d\x1b\xb8\x5e\x7b\x2e\xdc\xc4\xbe\x84\x3d\x87\x80\xa3\x6d\x36\xe7\xaf\x80\xa3\xf5\x5a\xb3\xb7\xcd\xd8\x7b\x01\x01\x65\x63\x74\xcb\x65\x74\x34\xa8\xbb\x4e\xd4\x55\x9e\x62\x32\x62\xb3\xda\xa9\x13\xc5\x77\xca\xb5\xb9\x21\xb8\x89\xbc\xd6\xe1\x71\x03\x36\xed\x9c\xd6\x80\xd3\x55\x1c\x20\xb6\x22\x34\x7d\xea\x09\x62\x25\x0c\x95\x82\x6f\x44\xa0\x9d\xef\x88\x40\x79\x1c\xec\x92\xd0\x61\x80\x79\x71\x11\x4b\xc6\x62\x1a\xd7\x3a\xf3\x6a\xde\xf2\xe1\x32\x87\x7f\x69\xb0\x58\x9b\x63\x56\xa3\xc1\xfc\x36\xcf\x3f\xfe\x61\x3b\x20\x21\x59\x2d\x53\x4b\x67\x52\x67\x75\x62\xd6\x05\x09\x63\xb1\x08\x19\x0c\x13\x54\xfa\xd7\x16\xcc\xb6\x86\x0a\xb6\x86\x0a\x9e\x75\xb6\xab\x11\x51\x98\x4d\xe7\x26\xdb\xb5\x5a\xd6\xf0\xa8\xed\x51\x46\x63\x21\xbb\x64\x8b\xcf\x65\xc8\xb5\x73\x8d\xc7\x2f\xd4\xb1\xc7\x66\x4f\x59\xa8\x63\x89\x67\x72\x98\xc2\x3b\x8a\xae\x8a\x8a\x98\x14\x8a\x39\x39\x61\x1b\xc8\xee\x7b\x04\xa6\xdc\x78\x74\x81\x3b\x8c\x44\xe9\x88\x9a\x26\xd2\x36\x92\x5f\x39\xea\x36\xa0\xa1\x4e\x9d\x73\x11\x66\xe6\x57\x8a\x99\x94\xda\xe7\xb3\x33\xe2\x0d\xc5\x75\x65\x16\xdd\x64\x5e\x9e\x37\x0d\x4d\xb6\x0e\x87\xd4\x85\xba\x7b\x85\xf6\x64\x94\xff\xf9\x93\x15\xf3\x9a\xd9\x97\x39\x2b\x30\xb2\x7c\x05\xaa\x57\x30\xc2\x2d\x07\x86\x6a\xed\x1d\x5a\x8a\x7f\x1a\x6b\xcf\xc7\x5c\x40\xf0\x34\xfd\x4b\x2b\x76\xea\x99\x75\xb4\x7c\xfd\x8d\xb4\x24\xae\x0f\xab\xd5\xf1\xbd\xeb\x43\x1d\x0d\x7b\xdf\x44\xc3\x7f\x3e\x59\x84\x7d\xf9\x9b\xd3\x81\x90\xff\x12\x7a\x8f\x89\x58\xad\xc2\xbf\x8b\x61\x3d\xcf\xfd\x65\x5b\x92\x78\x97\xb7\xe8\x03\xc5\x2e\xda\x6d\x07\x8b\x76\xb5\x19\x10\xad\xf4\xcc\xad\xa3\x3b\x43\xa1\x5b\x42\xa1\x1b\xc9\xbd\x35\xa2\xcd\xc3\x97\x77\x0a\x97\xc1\xca\xb5\x2f\xe8\xe9\x7f\x0c\x66\xf1\x72\x1e\x17\x58\xc4\xdc\x76\xa8\xbb\x68\x45\x0f\x7b\x10\x0a\xd4\x42\x5f\xbf\x22\xad\x12\x7a\x7c\x44\x2b\x5e\xdd\x9b\x79\x12\xd8\x0c\xcc\xd0\x5a\x23\x6f\x1c\xed\xef\xff\xdd\xdd\xdf\x6f\xac\x66\x14\x55\x29\xb9\xe5\xcb\x82\xbf\xde\xdc\x5c\xa2\x37\xaa\xe7\xcd\x92\xa0\x41\x0b\xb3\x24\xf8\x7c\xd9\xa2\x98\xc8\xea\x1e\x35\x40\x8b\xce\x74\x45\x29\x5b\x29\xc8\xa7\xe4\x5e\xc2\xdf\x1f\x34\xb0\xb1\x1a\xd8\xd8\xcd\xff\xfa\x1f\x82\xb8\xa7\xec\xce\x16\x0c\x87\x3c\x20\x42\xdf\x77\xbb\xc4\xfe\xa1\x57\x3f\xfc\x54\xbd\xa4\x55\xde\x84\xb9\xec\x62\xd7\x9f\xc9\x37\x4a\xab\xde\x83\x34\xc3\x0e\x0c\x1c\x20\x23\x58\x95\x19\x1a\xe5\xf2\x96\xb4\xd0\xd5\x32\x16\xda\x16\xc6\xf9\x2d\xb1\x37\xba\xfa\xf3\xc7\xb4\x87\x17\xad\xf1\x19\xc0\xa9\xf4\x67\x6d\x1f\x74\x34\x63\x17\xb4\xc1\x9b\x97\x88\x37\x2e\x38\x24\xc0\x7e\xd1\x63\x37\x93\x52\x69\xc6\x3d\xab\xfd\xf0\x5f\xc6\xe2\x37\x41\x24\xc6\x33\xee\xfd\x17\x18\x7d\x62\x26\x66\x0d\x6b\x7f\x26\x4b\xb3\x2d\xe0\xa4\x38\x21\x50\xdf\xf5\xd8\x17\x10\xa8\x5d\x38\x73\xbf\xbd\x42\x2d\x54\xa8\xf3\x96\xc1\xfc\xcf\xb5\x0a\x55\x5e\xc7\x83\x01\x30\xbe\x4c\x95\x1e\x76\x86\xe0\xce\xad\xb1\xa6\xf5\x46\x77\xe5\x8c\xb6\xb4\xc5\x6b\x6c\x09\x7f\x5e\x98\xb4\xc4\x67\x64\x86\x8f\x2a\x7d\xa9\xd6\x77\x62\x86\x90\x5e\x22\x21\x6d\x84\x84\x8e\x0f\x9b\x90\xd0\x49\x0d\x12\x32\xb9\x9e\x86\xc8\xe2\xc7\x1e\x09\xff\x00\xc6\xd3\xbd\x6e\xc7\xfb\xc7\xfb\x1d\xeb\x05\x20\x4d\x96\xf9\xe0\x02\x0b\xfb\xc6\x89\xec\x5e\xcc\xd8\x1b\x2e\x70\xbf\xd6\xfc\xba\x12\x70\x50\xaf\xf3\x09\x1f\xae\x81\x1f\x48\x2e\xbf\x93\x69\xf9\xe6\x41\xd8\x37\xbd\xcb\xec\xab\xab\x79\xe9\x9d\x35\xe8\x3b\xf9\xd8\x6b\x69\x0e\x59\xa0\x2c\x8f\x83\x92\xaa\x0b\x3b\xb4\xe9\x2e\x9d\x04\xa5\xb4\xbe\x5b\xcd\xb6\xa4\x27\x77\xd8\xd3\xf4\xc9\xde\xb0\xe5\x3b\x8e\x6e\x7a\x97\xfa\x1f\x1a\x34\x5c\x68\x16\x06\xbf\x13\x2e\xdc\x49\x1f\x2b\xc7\x9c\x1c\x4e\x52\xed\xf6\x41\xe2\xe1\x16\x77\x86\x10\xe0\xe9\x3c\xdd\xe9\x24\x62\x31\x4e\x86\x85\x8b\xd9\x5d\x52\x52\x60\x6f\xda\xf3\xda\xb9\xc3\xa9\xf1\x34\x49\x2b\x02\x36\xb0\x26\xaf\x15\x10\x44\x3e\x16\x24\xf4\x26\xea\x58\x3e\xe1\x42\x73\xa3\x9c\x92\xfe\x1f\xd2\x01\xcb\xde\x3a\x65\xaf\x5c\x5f\x0a\x78\x10\xe5\x05\x91\x51\xfa\x8c\x8f\x9a\x10\x21\xcb\xd2\x2e\x3f\x57\xb9\x49\xcd\xaf\x1d\x55\x2a\x70\x40\x42\x92\x6d\xe5\x57\x4e\x63\x27\x43\xa7\x72\xbb\x66\x16\x36\xf5\xd0\x40\x42\xc7\x8f\x5d\x38\xf7\xab\xc0\x6f\xf2\xad\x48\x12\x8c\xf5\x47\x05\xb1\x2f\x48\x79\xe0\xa6\x83\xbc\xa2\xc2\x14\xee\xa6\x31\x11\x21\xeb\x4b\x0c\x6c\x5c\xaf\xf5\x53\xdf\x69\xe7\xa4\x1e\x3c\x14\x8c\x6f\xf1\x3b\x12\xdd\x32\xff\x7a\x1c\x3a\x55\x19\xbb\x72\x84\x14\xd8\x53\x5d\xce\xff\x9d\xb5\xc7\xca\xdf\x2d\x35\x5c\xca\xaa\x0b\xa7\x21\x34\xd1\x4c\xbb\x11\x73\xb8\x49\x1e\x94\xcb\xfd\xed\x64\x8e\xf0\x98\xb8\x2a\x51\x16\x4c\x9d\x74\x90\xcc\x30\x56\x48\xef\x5b\xed\x6e\x76\xa6\xb6\x25\x68\x2a\xb4\x72\xf5\x22\xe2\xdc\x29\x40\x4d\x6b\xa7\x16\xb3\xb3\x85\x27\x3d\x6c\x5a\x5d\x6d\x82\xc9\xc6\xa2\xba\x38\xd4\x2f\xda\xd3\x73\xbc\xad\xae\xf6\x73\x5b\xbf\x38\x3c\xd0\xef\x68\xf3\x46\x47\xfb\xb9\xed\x26\x9e\xff\x39\xd3\x81\x04\x60\x6b\x5e\xb1\xf0\x2d\xfa\x83\x8f\xf5\x07\xeb\x6f\xe9\x1c\xe9\x17\xda\xa7\xa1\x27\xae\xde\xde\xac\x2d\x39\xf3\xfd\x45\x15\x74\x5b\x7d\x46\xef\x79\xea\xbd\x5a\xca\x66\x12\x5c\xd4\xb6\xe0\xd6\x0d\x70\x81\x2e\x81\xa9\x40\x2e\x61\xef\x82\x86\x44\x50\x26\x83\x8c\xaa\x19\xab\x5f\xf1\xac\x83\xe4\xbf\x76\x3b\x91\x8e\x26\x71\xee\x68\xe7\x71\xe7\x7f\x01\x00\x00\xff\xff\x36\xc2\x2d\x55\xce\x9c\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0x10, 0x2a, 0x34, 0x55, 0xc8, 0xf9, 0x53, 0xd0, 0x3a, 0xd9, 0xed, 0x39, 0x4e, 0x6f, 0x95, 0x22, 0x8, 0x3d, 0x4a, 0xb0, 0x62, 0x7e, 0xf, 0xa, 0x1e, 0x50, 0xf9, 0x46, 0xfb, 0xf0, 0xa0}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\xc5\x45\x8c\x87\x37\x05\x45\x87\x2e\x9a\xb3\xe4\x07\xba\x33\xd6\xb5\xcd\x42\x96\x0c\x91\x72\x9b\xbf\x2f\x9c\x00\x6d\x37\x82\x87\x38\x38\x1c\x30\xd6\x32\xe9\x8c\x49\x33\xb1\xb3\x99\xd6\x12\x64\xd3\xf7\xe7\x18\xf1\x1a\xc2\x80\xac\xe6\xa8\x13\x92\xb8\x58\xed\x6d\xa4\xc1\x2b\xb4\x18\x9b\xbf\xf4\x2d\x89\x13\x89\x1b\x4b\xd2\x32\x87\x01\x9f\x8b\xf8\x7f\x83\xec\xa2\x59\x6e\x99\xd0\x02\x5f\xf8\x10\xdc\xc4\x18\xfe\x98\x62\x38\xa3\xc8\xca\x88\x5c\x25\x39\xcd\xcf\x4f\x12\x00\xbf\x6f\x8c\xd8\x5a\x5d\xe9\x0b\xbb\x05\x40\xc6\x91\x66\x8f\xe5\xd7\x3d\x00\xb5\xcd\xd7\x74\x74\x02\xbd\xe5\x88\x7f\xc7\x91\xda\x85\x93\xf4\xec\x11\xde\xfa\x61\xda\x7f\x1f\x02\x98\xd4\x8f\xac\x1f\xfa\x61\xb5\x5c\xc4\x25\x06\x00\x70\x5d\x79\x2d\xce\xb6\x4b\x8e\x38\xbd\xd9\xe9\x3b\x00\x00\xff\xff\x50\x28\x34\xbf\x28\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x82, 0x88, 0xc0, 0xa4, 0xae, 0x3, 0xd5, 0x18, 0x5f, 0xf7, 0x9a, 0xce, 0x18, 0xcf, 0x8c, 0xeb, 0x4c, 0x24, 0x3f, 0xba, 0x8b, 0xe6, 0x78, 0x8f, 0xb9, 0x5e, 0x3f, 0xa9, 0x91, 0xc7, 0x9d}}
	return a, nil
}

var _es_dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x20\xf8\x30\x74\x40\x82\x5a\xce\x52\x04\x7e\x4b\xd7\xb5\x28\x90\xa2\xdd\x32\xec\x25\x08\x0c\x5a\x3c\x96\x38\x53\xa4\x40\x1e\x39\x76\x0b\xff\xf7\x81\xd4\x8d\xba\xb4\xc9\x8c\xac\x6b\x51\x3d\x45\xfa\x78\x48\x7e\xe7\xfa\x21\xd6\xa7\x13\x42\x28\x53\x4a\x23\x43\xa1\x95\xa5\x0b\xe2\x20\x42\xa8\x14\x16\xe9\x82\xdc\xfa\x37\x52\xa1\x7e\x65\x55\x08\x89\x6f\x15\x5d\x90\xe8\xb4\x45\x39\x43\x66\x75\x61\x62\xa0\x0b\x42\xcf\xce\xc8\x1b\xc3\xd6\x4c\x31\x72\x76\x46\x03\x33\x50\x6c\x25\x9d\x09\x9a\x02\x02\x3c\x15\x7c\x04\x15\xb1\x56\xbf\x6a\xa9\x8d\x3b\xd3\x24\x2b\xf6\x6c\x76\x4a\xe6\x51\x74\x4a\xe6\x17\x17\xa7\x24\xfa\x39\x3c\x5a\xb1\xcc\xdf\x7d\xd5\xba\x43\x7e\x22\x57\x12\x0c\xda\xd0\x0e\xf7\xb9\xb7\xe3\xcc\xa6\x2b\xcd\x0c\xa7\xd5\xda\xc1\xff\xbd\x3b\x21\xe4\xe0\xcc\x29\x70\x81\x3d\xb6\x34\x51\x80\x6f\x39\x5d\x10\x55\x48\x59\x22\x86\xe5\xe9\x9f\x5a\x4b\x14\x39\x5d\x90\x99\x07\x85\x33\x39\xf7\x8f\x52\xa8\x8d\x8b\xeb\xed\x9d\x7f\xcd\x99\x02\x69\x9b\xc8\xd6\x71\xa5\x4c\x0a\x66\xbd\xaf\x3e\x09\x87\x9a\x30\x5d\x31\x8f\xac\x99\xb4\x4d\x68\x3c\xf7\x6b\x50\x09\xa6\x2e\x0d\xb3\x0e\x0e\x63\xe6\x41\x72\x6a\xe6\x7e\x65\x2d\xa4\x0c\x33\xe9\x81\x37\x86\x71\x01\x0a\x6b\x77\xfc\x42\x62\x04\xff\xa0\xdb\x0a\x29\xd3\x46\x17\xe4\x32\x88\xed\xbd\x3b\x6b\x1e\x00\xbb\xf0\x0c\x42\xe8\xde\xbd\xd7\xf1\x6e\xce\x4e\x05\xe7\xa0\x6e\xc0\x88\x11\xf2\x3e\x96\xcd\x25\x54\x42\x02\x8a\x77\x69\xb0\x6d\xd2\xdf\x46\x08\x8d\x0b\x63\x4a\x2f\xfa\x2b\x19\xdb\x8d\xa1\x42\x8d\xa0\x36\xd5\xf7\xc3\xca\x44\x8d\x4c\x8e\x58\x6f\x99\x2c\x5a\x1f\x06\x8e\x4a\xa1\xfc\x6a\x78\x9a\x07\xef\x05\x2f\x73\xd9\xa0\x2e\x4d\x1f\xb4\x50\xf8\x4e\xfb\xd6\xf0\x40\x53\xc7\x54\xe7\xdd\x86\x6d\xf2\x7c\xdd\xd4\xdb\xe0\xf6\x1c\x4c\x0c\x0a\x59\x02\x83\x20\xe7\xee\x26\x97\xf6\xc2\xed\x9d\x77\xf1\x61\x4e\x0c\x28\x0e\x06\x7c\x5f\xae\xa5\xc6\x96\x97\xf5\x49\x7c\xbf\x05\x63\x04\x87\xb6\xf0\xcb\xc5\x9c\xc5\x30\x56\xb7\x16\x59\xbc\x19\xdc\x62\x11\xf2\x1c\xf8\xb5\x50\x43\xc2\xc8\x4c\x02\x68\x83\x11\x15\x0e\x29\xd7\xbd\xbb\xbc\x1c\x1b\x0c\xe1\x19\x48\x66\x51\xc4\x16\x98\x89\xd3\xa5\x50\x5c\xc4\x60\x97\xd5\xeb\x1a\x30\x4e\x97\x3e\xa3\xb7\x51\x76\x17\x0e\x95\xa6\xde\x5e\x6b\x93\x31\xac\xcf\xeb\x5a\x18\x58\xfb\x91\x40\xaf\x68\x03\x1f\xaa\xa7\xd6\x77\x4c\x0d\xd8\x54\x4b\xde\x8b\x09\x8a\x0c\x5e\x1b\x9d\xf5\x3b\xd3\xe1\x7f\x40\x52\x25\xb9\xb7\xe1\x26\x15\x6b\x1c\xee\x40\x3f\xac\xe8\xef\x05\x98\x3d\xe9\x10\xa5\xd8\x4c\xa8\x4f\x61\x6d\x33\x03\x7c\x58\xdd\x56\x1b\xec\x35\xae\x2f\xec\x65\x3d\x3b\x5d\x04\xb7\x82\x17\x4c\xd2\x41\x95\xd5\x36\x7e\x30\xb6\x04\x76\x6c\x27\x7a\xe5\xba\x2a\xe2\x4d\x99\xc3\xd0\x0f\xd7\x89\x55\xc9\x3b\x57\x47\x46\x7c\xcf\x7a\xbc\x43\x9b\x4e\x1c\x69\x84\x3d\xdb\xc1\x17\x4a\x67\xdd\x24\x5b\x69\xd5\x4b\xb6\x64\x2b\x90\x75\x90\x05\xd8\xe7\xb6\xb7\xae\x93\x97\xcc\x42\x57\x1d\x9b\x91\xd3\x65\xde\xcc\x9c\x01\x1c\xb8\xd4\x96\xd4\xe9\x43\x6c\x6d\xea\xf2\x36\x4a\x77\x70\xc3\x7f\xc8\x73\x50\xfa\xfb\x61\xea\x99\x14\xc9\xd8\xb4\xf5\xf8\x35\x6c\x1b\xd2\x1d\x6d\xae\x42\xf0\x23\x88\x66\x07\x38\x56\x35\x7f\x99\x54\x73\x52\xcd\xa7\x56\x4d\xa1\x38\xec\x84\x4a\xca\x87\x47\xeb\x66\xbd\xed\x11\xda\xf9\x99\x41\xf7\x6f\xb8\x71\x90\x80\xf0\x68\x72\xde\xdc\x57\xc6\x38\xbb\x97\xdf\x88\xb2\xbf\xd2\x71\x91\x81\x42\x4b\x6a\x4f\x9f\xd7\xd4\x27\xbd\x7f\x02\xbd\xff\x82\x82\xd2\xf7\xf9\x24\xf6\x93\xd8\x7f\x95\xff\x90\x2f\x8f\xd0\xfa\xf9\xa4\xf5\x93\xd6\x1f\xa5\xf5\xe3\x52\xca\x75\xdc\x9f\x76\x7d\xd1\x1c\x58\x1c\xa3\xe6\x9f\xbf\xbd\x12\x71\xee\xcd\x1f\x64\x42\x2a\xeb\xef\x4b\xc1\x03\xbe\x93\x64\x3f\xb5\x64\x7f\x4d\x1d\x9c\xf4\xfa\x07\xd2\xeb\xc1\x3f\xe7\xc7\x08\xf6\x8b\x49\xb0\x27\xc1\x7e\x42\xc1\xb6\xa8\x0d\x2c\xad\xf8\x08\xcb\xd5\x1e\xe1\x01\xf1\x76\x76\xdf\xf8\xcf\xd8\x37\xce\x21\x5e\xea\x24\xe9\xf0\x9d\xa4\xf2\x28\xa9\xe4\x10\x8f\x55\xc6\xa4\x96\xff\x87\x5a\x9e\x54\xc7\xba\xbe\x73\x2d\xe5\xbc\x8e\x66\x65\x6e\xa8\x8d\x53\xc8\xd8\x5f\x60\xac\xd0\xee\xec\xf9\xbc\x84\x71\x2f\xab\x6f\xd7\x66\x53\x5a\x22\x4b\x82\xaf\xcb\x08\x59\x2e\x19\x0a\x95\x0c\xbf\xe4\xb7\x1f\xb6\x7d\x21\x36\xeb\xeb\xb2\x6b\xa9\xd2\xf7\x67\xd1\x45\x56\x05\x9d\xa2\xae\x40\xda\xd9\x97\x8b\x78\xe3\x87\x64\xb5\xbb\x62\xbf\x14\x0a\xc1\x6c\x99\x0c\x0b\x91\x5e\xb4\xa5\xd6\xf8\xe6\x5f\xce\xc3\x97\x28\x6b\x9f\x2f\x82\xe7\x28\x7c\x39\x9f\x85\x2b\x41\x27\xce\x83\xe7\xa8\xfa\x96\xdf\x75\xf5\xa3\xf6\xc3\x96\x56\x01\xab\xc7\xcb\x6f\xe1\x14\x25\x99\x56\x02\xb5\xa9\x7f\xa0\xa4\x85\xd7\x68\xfa\xea\xf2\x3a\x7b\xf1\xf7\xe6\x5d\x15\xed\x6d\x93\x91\x68\x76\x72\xf8\x27\x00\x00\xff\xff\x22\xec\x09\x54\x3e\x21\x00\x00")

func es_dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_es_dashboard_dataJson,
		"es_dashboard_data.json",
	)
}

func es_dashboard_dataJson() (*asset, error) {
	bytes, err := es_dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "es_dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x46, 0xe9, 0xd1, 0x18, 0xcb, 0xff, 0x63, 0x5e, 0xd6, 0x30, 0x59, 0x59, 0x16, 0x1e, 0xc9, 0x1c, 0xa7, 0x6b, 0xe1, 0x2e, 0x3, 0x1b, 0x66, 0xeb, 0xb9, 0xfa, 0xec, 0xe6, 0x5f, 0xb2, 0x5a}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xbd\x4e\xc4\x30\x10\x84\xfb\x3c\x85\x75\x25\x85\x9b\xab\xa9\x28\x29\x79\x80\xd5\xc6\x1e\x81\x2f\x89\x6d\x79\xd7\x07\x11\xe2\xdd\x91\xf2\x23\x25\x5c\x48\x9b\x99\x6f\xf2\xd9\x4e\x55\x73\x55\x73\x09\x51\x94\xa3\x83\x5c\xcc\x77\x63\xcc\x9d\xfb\x0a\xf3\x6c\xf8\x53\x68\x8d\x2c\xe7\x4c\x82\x72\x47\xb1\x4f\xcd\x4f\xd3\xac\xac\x6f\x5f\xfa\x2a\x8a\xf2\xc8\x16\x2f\xe4\xe6\x90\x10\x7d\x4e\x21\xaa\xfd\xfb\x41\xf6\x73\xfc\x8e\xa8\x67\x1e\x7d\x62\xaf\x10\xa5\xa9\xb9\x87\x07\x68\x09\x4e\xde\x26\xcd\x93\x8d\xa5\xb7\x9c\x67\xbb\x90\x4b\xfa\x1a\x4f\xc8\x29\x3f\xe0\xd0\xb3\x68\x70\xff\xfd\x79\x89\x05\x5c\xdc\x07\xf9\x34\x70\x88\x16\x47\x02\x72\x6d\xab\xeb\xa0\x8f\x1b\x72\xa5\x39\xb2\x6b\x67\xcf\xbd\xe2\x48\x9c\x07\x62\xe7\x20\x42\x1d\x46\x2b\xd7\x0e\xe3\x16\xbb\xa5\x76\x76\x3e\xbb\xf2\x5b\x6a\xb7\x4f\xff\x1b\x00\x00\xff\xff\x80\xd6\x9b\x25\x36\x02\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb2, 0xcd, 0x8d, 0x12, 0x49, 0xd0, 0xac, 0x9a, 0xbf, 0xfa, 0x4c, 0x3a, 0x98, 0x20, 0x0, 0xfe, 0x5a, 0x21, 0x3a, 0xc0, 0xd1, 0x8e, 0xa6, 0x36, 0xb3, 0x1c, 0x90, 0xcf, 0xf3, 0x1, 0xbc, 0x81}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xc1\x8e\xd3\x40\x0c\xbd\xf7\x2b\xac\x70\xd9\x4a\x10\xb5\x95\x56\x7b\xea\x91\xaf\x40\x68\xe4\x4c\xdc\x74\xd8\xc9\xcc\x60\x3b\x81\x80\xfa\xef\x28\x09\x88\x44\x99\x25\x17\x72\x8a\xfc\xde\xf3\xd8\x4f\xcf\x3d\xb2\xc3\xca\x13\x14\xd6\x77\xa2\xc4\x26\x60\x4b\x05\xfc\x3c\x3c\x0e\x87\x2d\xd8\x27\x6b\x5c\xfd\x26\x2c\x5d\x15\x48\x73\x0c\x4c\xc9\xb8\x20\x8a\xc1\x92\xb1\xb1\x0b\xfa\x6f\x8a\x0e\x69\x3b\x05\x36\x14\x74\xb7\xcd\x9a\xb4\x68\xf4\x0e\x3e\x7a\x14\x75\x56\x08\xd9\xde\xe1\x8f\x46\x96\x72\x92\xbd\x07\x96\x8c\xec\x98\x24\xa6\x27\x16\x17\x43\x16\x4a\x36\x57\xb6\x4c\xa8\x64\x38\xfa\x6c\x43\xaa\xc4\xc4\xa4\x2e\x06\x19\x61\x80\x9a\x6e\xd8\x79\x85\x2b\x7c\x3a\x00\xc0\x54\x1b\xbf\x3e\xfa\xae\x9d\x07\x83\x2b\x14\x4d\xba\x14\x6b\x44\xdc\x8f\x11\xb9\x9c\xa6\xf2\xe3\xfd\x01\xe0\xf3\xfa\xb9\xc4\xf1\xfb\xb0\xb3\x63\x5d\xed\xd9\xb4\x64\x50\x68\x5c\xd8\x69\xe2\x51\x24\xc7\x98\xb5\x4b\x47\x01\x7e\x6f\xd7\x62\x7a\xc2\x30\x1c\x57\x76\xcc\x46\x14\xd8\x71\x64\xfc\xd0\x0e\xf2\xd5\x17\xb3\x01\x57\x28\x9e\xcb\x97\x72\x2a\x99\x19\x2f\x2f\xe5\xf9\x54\x9e\x8a\x95\x26\x45\xd1\x86\x69\x12\x5e\xa1\x38\x9f\xcb\x97\x91\xf0\xd8\x8c\xd6\x09\x71\xf6\x5c\xea\xca\x24\x14\xf9\x16\x79\x7b\x09\xd3\x4a\xe3\xaf\x49\xc4\xb7\xc8\xed\xb4\xbe\x0b\xe2\x9a\xbb\x66\x1d\x48\xc8\xd8\x92\x12\xcb\x6a\x7b\xef\x44\x9f\x46\x0b\x44\xd9\x85\xe6\x78\x5c\x0b\x45\xee\x26\x75\x95\x77\xd6\xbc\xd2\xb0\xe9\xdb\xa2\x2a\x71\x1b\x45\x8d\x77\x96\x82\x90\xb9\xb9\x4c\xf6\x38\x46\x35\x95\x8f\xf6\xd5\xd4\xd4\x3b\x4b\xff\x27\x7e\xcf\x6f\xc7\xef\x4b\xac\x8c\x10\xf7\xc4\x7b\x11\xcb\x31\xff\xa6\xf5\x57\x00\x00\x00\xff\xff\x5e\xdd\x8b\x6e\xdb\x04\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x33, 0x57, 0x84, 0xf3, 0xaf, 0xc7, 0x6b, 0xe5, 0xec, 0xe8, 0x28, 0xf7, 0x12, 0x9f, 0x8a, 0x7a, 0x3b, 0x20, 0xdb, 0x9c, 0x43, 0x42, 0xbe, 0xfa, 0x9b, 0xb, 0x5c, 0xbb, 0x98, 0x3, 0x6c, 0xf7}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":             clusterTf,
	"dashboard.yaml":         dashboardYaml,
	"dashboard_data.json":    dashboard_dataJson,
	"datasource.yaml":        datasourceYaml,
	"es_dashboard_data.json": es_dashboard_dataJson,
	"outputs.tf":             outputsTf,
	"variables.tf":           variablesTf,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf": {clusterTf, map[string]*bintree{}},
	"dashboard.yaml": {dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json": {dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml": {datasourceYaml, map[string]*bintree{}},
	"es_dashboard_data.json": {es_dashboard_dataJson, map[string]*bintree{}},
	"outputs.tf": {outputsTf, map[string]*bintree{}},
	"variables.tf": {variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
